#include "Solution.h"

int Leetcode601_700::Soltuion::newInteger(int n)
{
    // 很有趣的一道数学题
    // 列举出新数列开头的一些元素即可知道大概的规律：
    // (0), 1, 2, 3, 4, 5, 6, 7, 8,
    // 10, 11, 12, 13, 14, 15, 16, 17, 18,
    // 20, 21, 22, 23, 24, 25, 26, 27, 28,
    // ...
    // 80, 81, 82, 83, 84, 85, 86, 87, 88, 
    // 100, 101, 102, 103, 104, 105, 106, 107, 108,
    // ...
    // 我们会发现这就是一个九进制序列！
    // 所以我们要找的实际上就是第 n 个九进制数
    // 所以我们就需要一种 k1 进制转换成 k2 进制的方法
    // 回忆，十进制转二进制，我们做的事很简单，就是用 2 不断去除要转换的十进制数
    // 把每次留下的余数倒序列出来，就是对应的二进制表示
    // 对于九进制也一样
    // 对于 n，我们不断地用 9 去除以 n 上一次被 9 除的余数
    // 把得到的所有余数倒序组合，就是最后的结果
    // rem 保存每一次除法最后的余数，quo 保存每一步的商
    int rem = 0, quo = n, res = 0, exp = 1;
    while(quo)
    {
        // 每一轮，对这个非零的 rem 进行一轮 9 除法
        // 把余数保存到结果中，注意倒序
        res += exp*(quo%9);
        quo = quo/9;
        exp *= 10;
    }
    return res;
}