#include "Solution.h"

int Leetcode401_500::Soltuion::arrangeCoins(int n)
{
    // 数学题，假设可以完整地形成 a 行阶梯
    // 那么根据等差数列求和公式
    // 应该有 (1+a)*a/2 <= n && (1+(a+1))*(a+1)/2 > n
    // 忽略 a 这个变量，我们要求的东西实际上是：
    // x^2+x-2n 这个二次函数的零点
    // 注意到这个二次函数本身是开口向上的，那么简单的想法就是求出右侧的那个零点
    // 根据二次函数求根公式，我们不难知道
    // 这个函数的两个零点是
    // x1 = (-1-sqrt(1+8n))/2, x2 = (-1+sqrt(1+8n))/2
    // 本题很明显我们要的是 x2
    // 那么直接求出这个值，省去小数部分，保留的整数部分就是答案
    return (int)((-1.0+sqrt(1+8.0*n))/2.0);
}